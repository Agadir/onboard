It's assumed you know what source routing is and the basics on 
how to connect to multiple gateways. It's also assumed that you
have a basic knowledge of what Linux rp_filter is -> google!

Problem: sometimes Linux rp_filter doesn't play well with policy 
routing. Here are some suggestion to fix the problem with no need 
to completely disable rp_ilter (which is an important security 
feature against IP address spoofing).

Consider the following scenario:

host -> eth1\                            /gateway1 192.168.0.1
             +-ROUTER-+-eth0 -> -switch-+ 
host -> eth2/                            \gateway2 192.168.0.2

# ip rule show

0:      from all lookup local
1:      from all lookup main
100:    from all iif lo lookup adsl
200:    from all iif eth1 lookup isp1
300:	from all iif eth2 lookup isp2
32767:  from all lookup default

Table 'main' contains only LAN routes (no default gateways):

# ip route show table main

192.168.0.0/24 dev eth0  proto kernel  scope link  src 192.168.0.252
192.168.1.0/24 dev eth1  proto kernel  scope link  src 192.168.1.1
192.168.2.0/24 dev eth2  proto kernel  scope link  src 192.168.2.1

# ip route show table isp1

default via 192.168.0.1 dev eth0  proto static

# ip route show table isp2

default via 192.168.0.2 dev eth0  proto static

# ip route show table default
## (nothing)

When a packet arrives at eth0, RP filter verification fails! So the
host behind you router cannot surf the internet...

To solve the problem, you may disable rp_filter... 
...or you may do this:

# ip route add default dev eth0 table default

...so Linux RP filter is happy!

---

If your two gateways are on two different interfaces

     192.168.2.1 eth2\        /eth0---gw0 192.168.0.1
LAN                   +ROUTER+                         INTERNET
     192.168.3.1 eth3/        \eth1---gw1 192.168.1.1

you will have something like:

# ip route show table isp0

default via 192.168.0.1 dev eth0  proto static

# ip route show table isp1

default via 192.168.1.1 dev eth1  proto static

# ip route show table default
## (nothing)

And what you'll have to do to solve the rp_filter problem is to setup also
reverse source routing:

# ip rule show

0:      from all lookup local
1:      from all lookup main

100:    from all iif lo lookup isp0       
  # one has been chosen for locally generated packets

200:    from all iif eth2 lookup isp0  
300:	from all iif eth3 lookup isp1
  # outgoing source routing

400:    from all iif eth0 lookup isp0
500:    from all iif eth1 lookup isp1
  # reverse source routing
  # to make rp_filter happy!

32767:  from all lookup default


