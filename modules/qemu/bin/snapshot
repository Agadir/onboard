#!/usr/bin/env ruby

__dir__         = File.dirname __FILE__
__qemu_lib__    = File.realpath File.join __dir__, '../lib'
__onboard_lib__ = File.realpath File.join __dir__, '../../../lib'

$LOAD_PATH.unshift __onboard_lib__
$LOAD_PATH.unshift __qemu_lib__

require 'pp' # DEBUG

require 'onboard/virtualization/qemu'

class OnBoard
  module Virtualization
    module QEMU
      CONFDIR ||= (
        ENV['ONBOARD_QEMU_CONFDIR']                               or
        "#{ENV['HOME']}/.onboard/etc/config/virtualization/qemu"
      )
    end
  end
end

include OnBoard::Virtualization

VARRUN ||= '/var/run/onboard'

# Usage:
_action_, _vmid_, _snap_name_, _drive_name_ = ARGV

vm = QEMU.find :vmid => _vmid_

case _action_
when 'take'
  if vm.running?
  else
    drive_name, drive = nil
    if _drive_name_ 
      drive_name, drive = _drive_name_, vm.drives[_drive_name_]           
    else
      drive_name, drive = vm.drives.find{|n,d| d['config']['media'] == 'disk'}
    end

    Process.daemon

    File.open "#{VARRUN}/qemu-#{vm.uuid_short}.snapshot.pid", 'w' do |f|
      f.write Process.pid
    end
    outdbg = File.open '/tmp/snaphot', 'w' 
    outdbg.puts drive['snapshots'].any?{|snap| snap.name == _snap_name_}
    ## 'take' is a create-or-update operation
    if drive['snapshots'].any?{|snap| snap.name == _snap_name_}
       outdbg.puts %Q{qemu-img snapshot -d "#{_snap_name_}" "#{drive['config']['file']}" > #{VARRUN}/qemu-#{vm.uuid_short}.snapshot.out 2>&1}
    end
    #system %Q{qemu-img snapshot -c "#{_snap_name_}" "#{drive['config']['file']}" > #{VARRUN}/qemu-#{vm.uuid_short}.snapshot.out 2>&1}
    outdbg.close
  end
end



