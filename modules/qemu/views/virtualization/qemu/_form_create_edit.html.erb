<% 
  sect_sep_height = '0.8ex'

  vm ||= nil

  vnc_available   = OnBoard::V12n::QEMU::VNC::Display.available
  vnc_max         = OnBoard::V12n::QEMU::VNC::Display::MAX
  spice_available = OnBoard::V12n::QEMU::SPICE::Port.available
  spice_min       = OnBoard::V12n::QEMU::SPICE::Port::MIN
  spice_max       = OnBoard::V12n::QEMU::SPICE::Port::MAX

  cache_description   = {
    'unsafe'        => 'Allows snapshots on the fly, but it&rsquo;s also the most prone to data corruption',
    'writethrough'  => 'The slowest and most reliable',
    'writeback'     => 'Recommended, especially with QCOW2 images'
  }
  cache_default       = 'writeback'  

  # Pre-fill form fields.
  formvals = {}
  # On a single-vm page, grab data from the vm object:
  if vm

    %w{name m vnc k soundhw}.each do |k|
      formvals[k] = vm.config["-#{k}"] 
    end
    formvals['cmdline_append'] = vm.config.opts['append']
    formvals['spice'] ||= {}
    formvals['spice']['port'] = vm.config['-spice']['port'] if 
        vm.config['-spice'] and vm.config['-spice']['port'] 
    optical_drive       = vm.config['-drive'].find{|d| d['media'] == 'cdrom'}
    formvals['cdrom']   = 
        OnBoard::V12n::QEMU::Config.relative_path optical_drive['file']

    hd_drives_h           = vm.config['-drive'].select{|d| d['media'] == 'disk' }
    hd_drives             = hd_drives_h.map{|h| OnBoard::V12n::QEMU::Config::Drive.new h}
    #usb_disk            = (
    #    vm.config['-usbdevice']                               and 
    #    vm.config['-usbdevice'].find{|d| d['type'] == 'disk'} 
    #)     

    hd_drives ||= [] 
    formvals['disks'] = []
    hd_drives.each do |hd|
      hd['path'] = OnBoard::V12n::QEMU::Config.relative_path hd['file'] if hd['file']
      formvals['disks'] << hd
    end
    formvals['disks'] << OnBoard::V12n::QEMU::Config::Drive.new({'cache' => cache_default})

    #if usb_disk
    #  formvals['usbdisk'] = OnBoard::V12n::QEMU::Config.relative_path usb_disk['file']
    #end

    if vm.config['-smp'] and vm.config['-smp']['n'] and vm.config['-smp']['n'].to_i > 0
      formvals['smp'] ||= {}
      formvals['smp']['n'] = vm.config['-smp']['n'].to_i
    end

    # Now, the -net machinery: there are two (or more???) -net Hashes for
    # each row in the form: -net nic,... -net tap,... , or 
    # -net nic,... -net user,... and so...
    #
    # Do as follows: for each -net nic, associate th first -net (tap|user) 
    # with same VLAN. Besides, does it make sense to have several host TAPs 
    # on the same QEMU VLAN? I guess, no...

    formvals['net'] = []

    vm.config['-net'].select{|x| x['type'] == 'nic'}.each do |nic|
      hostside = vm.config['-net'].detect do |x| 
        x['vlan'] == nic['vlan'] and not %w{none nic}.include? x['type'] 
      end
      formvals['net'] << nic.merge( hostside )
    end

  end

  # Some defaults:
  formvals['m']             ||= 348
  formvals['vnc']           ||= ":#{vnc_available.first}"
  formvals['spice']         ||= {}
  formvals['spice']['port'] ||= spice_available.first
  # formvals['cache']         ||= cache_default # unused, we have an Array if disks...
  formvals['disks']         ||= [{'cache' => cache_default}]  

  random_macs               = []
  0.upto(5) do |i|
    random_macs << OnBoard::V12n::QEMU::Network::NIC::MAC.random
  end
  random_macs.sort!
  formvals['net']           ||= []
  formvals['net'][0]        ||= {
    'type'    => 'user',
    'vlan'    => '0',
    'ifname'  => '[auto]',
    'macaddr' => random_macs.first.to_s.upcase
  }
  1.upto(5) do |i|
    formvals['net'][i] ||= {
      'type'    => 'none',
      'vlan'    => i.to_s,
      'ifname'  => '[auto]',
      'macaddr' => random_macs[i].to_s.upcase
    } 
  end
  formvals['net'].each do |fv|
    fv['ifname']  ||= '[auto]'
    fv['macaddr'] ||= '[auto]'
  end
  formvals['smp']       ||= {}
  formvals['smp']['n']  ||= 1
%>
  <table id="vmcreateedit">
    <thead>
    </thead>
    <tbody>
      <tr>
        <th title="A descriptive name" scope="row">Name</th>
        <td>
          <input type="text" name="name" value="<%= formvals['name'] %>"/>
        </td>
      </tr>
      <tr>
        <th scope="row">RAM</th>
        <td><input style="text-align:right" type="text" name="m" size="5" value="<%= formvals['m'] %>"/> MB <!-- names recall cmdline opts --></td> 
      </tr>
      <tr>
        <th scope="row">Number of CPUs / cores</th>
        <td><input style="text-align:right" type="text" name="smp[n]" size="2" value="<%= formvals['smp']['n'] %>"/> <!-- names recall cmdline opts --></td> 
      </tr>

      <tr> 
        <th scope="row">CD/DVD image (optional)</th>
        <td>
          <input class="vimagepath" type="text" name="cdrom" id="cdrom" onclick="javascript:popup_filechooser(this);" value="<%= formvals['cdrom'] %>"/>
        </td>
      </tr>
      <!--
      <tr> 
        <th scope="row">External USB disk/pendrive image (optional)</th>
        <td>
          <input class="vimagepath" type="text" name="usbdisk" id="usbdisk" onclick="javascript:popup_filechooser(this);" value="<%# formvals['usbdisk'] %>"/>
        </td>
      </tr>
      -->
      <tr style="height:<%= sect_sep_height %>"> </tr> <!-- BEGIN HARD DISK IMAGES -->

    <% formvals['disks'].each_with_index do |hd, idx| %>
      <% unless idx == 0%>
        <tr style="height:<%= sect_sep_height %>"> </tr>
      <% end %>
      <tr>
        <th scope="row">
          Hard Disk Image <span style="font-weight:normal;">(@ <em style="font-size:110%">slot</em>)</span>
          <div class="optinfo">Choose existing</div>
        </th>
        <td>
          <input class="vimagepath" type="text" name="disk[<%= idx %>][path]" id="disk_<%= idx %>_path" onclick="javascript:popup_filechooser(this);" value="<%= hd['path'] %>"/> 
          @<select name="disk[<%= idx %>][slot]" id="disk_<%= idx %>_slot">
            <% ([''] + OnBoard::V12n::QEMU::Config::Drive.disk_slots).each do |slot| %>
              <%
                runtime_name = begin 
                                 hd.runtime_name
                               rescue Exception
                                 nil
                               end              
              %>
              <option value="<%= slot %>" <%= 'selected' if slot == runtime_name %>>
                <%= slot %>
              </option>
            <% end %>
          </select>
          <!-- -->
          <% begin %>
            <% if hd.img_info %>  
              <span class="lowlight" style="margin-left:1em">(<%= hd.img_info['virtual_size'].split.first %>)</span>
            <% end %>
          <% rescue NoMethodError %>
            <% # turn the Hash into an object with proper methods %> 
            <% hd = OnBoard::V12n::QEMU::Config::Drive.new hd %>
            <% retry %>
          <% end %>
          <!-- -->
        </td>  
      </tr>
      <tr>
        <th scope="row">
          <div class="optinfo">
            Or create a new one 
            <span style="vertical-align:middle; margin: 0 0 0 2em">
              <input title="Check this box to create a new disk image" style="vertical-align:middle;" type="checkbox" name="disk[<%= idx %>][qemu-img][create]" id="disk_<%= idx %>_qemu-img_create_checkbox" onClick="javascript:qemuImgCreateControls(<%= idx %>)"/>
            </span>
          </div>        
        </th> 
        <td>
          &nbsp;Size <input type="text" name="disk[<%= idx %>][qemu-img][size][G]" id="disk_<%= idx %>_qemu-img_create_size" size="2" value="8" style="text-align:right" disabled/>GB;
          &nbsp;Format <select name="disk[<%= idx %>][qemu-img][fmt]" id="disk_<%= idx %>_qemu-img_create_fmt" disabled>
            <option value="qcow2">QCOW2 (recommended)</option>
            <option value="raw">Raw</option>
            <!-- exclude "alien" image formats for now... -->
          </select>
          On
          <select name="disk[<%= idx %>][qemu-img][subdir]" id="disk_<%= idx %>_qemu-img_create_subdir" disabled>
            <option value="">Local storage</option>
            <% OnBoard::V12n::QEMU.net_storage_subdirs.each do |subdir|  %>
              <%
                subdir_show_as = subdir
                # TODO: DRY: implement a library method 
                if subdir =~ %r{^[^/]*net[^/]*/([^/]+)/([^/]+)/([^/]+)}
                  proto, host, vol = $1, $2, $3
                  subdir_show_as = "#{proto}://#{host}/#{vol}"
                end
              %>
              <option value="<%= subdir %>"><%= subdir_show_as %></option>
            <% end %>
          </select>
        </td>
      </tr> 
      <tr>
        <th scope="row">
          Optimize for networked / distributed storage
          <% if idx == 0 %><div class="optinfo" style="width:46ex;">Bypass flesystem mount and use URL e.g. <code>gluster://localhost/gv0/path/vm.qcow2</code>. Not available for all QEMU versions and protocols. Disable if you encounter errors. Ignored for local storage. Some useful information <a href="http://raobharata.wordpress.com/2012/10/29/qemu-glusterfs-native-integration/">here</a>.</span><% end %>
        </th>
        <td style="vertical-align:middle;">
          <input type="checkbox" name="disk[<%= idx %>][use_network_url]" <%= 'checked' if hd['file_url'] %>/>
        </td>
      </tr>
      <tr>
        <th scope="row">Disk Caching</th>
        <td>
          <select name="disk[<%= idx %>][cache]">
            <% OnBoard::V12n::QEMU::Config::Drive::CACHE.each do |c| %>
              <option <%= 'selected' if c == hd['cache'] %> value="<%= c %>" title="<%= cache_description[c] %>"><%= c %></option>
            <% end %>
          </select>
        </td>
      </tr>
    <% end %>

      <tr style="height:<%= sect_sep_height %>"> </tr> <!-- END HARD DISK IMAGES -->

      <tr>
        <th scope="row">Remote Display</th>
        <td>
          VNC Display
          <select name="vnc">
            <% 1.upto(vnc_max) do |n| %>
              <% 
                selected = ''
                disabled = ''
                if ":#{n}" == formvals['vnc']
                  selected = 'selected'
                elsif not vnc_available.include? n 
                  disabled = 'disabled'
                end
              %>
              <option <%= selected %> <%= disabled %> value=":<%= n %>">:<%= n %></option>
            <% end %>
          </select>
          &nbsp;&nbsp; <!-- horrible -->
          SPICE port
          <select name="spice[port]">
            <option <%= 'selected' if formvals['spice']['port'] == 0 %> value="0">(disable)</option>
            <% spice_min.upto(spice_max) do |n| %>
              <% 
                selected = ''
                disabled = ''
                if n == formvals['spice']['port']
                  selected = 'selected'
                elsif not spice_available.include? n 
                  disabled = 'disabled'
                end
              %>
              <option <%= selected %> <%= disabled %> value="<%= n %>"><%= n %></option>
            <% end %>
          </select>

        </td>
      </tr>
      <tr>
        <th scope="row">
          Keyboard layout
          <div class="optinfo">For VNC, etc.</div>
        </th>
        <td>
          <select name="k">
            <option value=""></option>
            <% OnBoard::V12n::QEMU::Config::KEYBOARD_LAYOUTS.each do |k| %>
              <option <%= 'selected' if formvals['k'] == k %> value="<%= k %>"><%= k %></option>
            <% end %>
          </select>
        </td>
      </tr>
      <tr>
        <th scope="row">Sound card</th>
        <td>
          <select id="soundhw" name="soundhw">
            <option value="">(none/default)</option>
            <% OnBoard::V12n::QEMU::Sound::Hardware.models.each do |model| %>
              <option <%= 'selected' if model == formvals['soundhw'] %> value="<%= model %>"><%= model %></option> 
            <% end %>
          </select>
        </td>
      </tr>
    </tbody>
  </table>

  <h4>PCI passthrough</h4>
  <table>
    <% OnBoard::Hardware::LSPCI.by_id.each_pair do |pci_id, pci_device| %>
      <% next if pci_device[:desc] =~ OnBoard::V12n::QEMU::Passthrough::PCI::EXCLUDE_DESCS %>
      <%
        conf_h = vm.config.opts['-device'].find{|h| h['host'] == pci_id }
        passthrough = conf_h && conf_h['type']
      %>
      <tr <%= %q{class="highlight" style="font-weight:bold"} if passthrough %>> 
        <td><%= pci_id %></th>
        <td><%= pci_device[:vendor] %></td>
        <td><%= pci_device[:model] %></td>
        <td><%= pci_device[:desc] %></td>
        <td>
          <select name="pci_passthrough[<%= pci_id %>]" style="width:20ex">
            <option value="">(<%= passthrough ? 'detach' : 'not attached' %>)</option>
            <%# define QEMU::Passthrough::PCI::METHODS ? %>
            <option value="vfio-pci" <%=    'selected' if passthrough == 'vfio-pci'    %>>
              VFIO-PCI
            </option>
            <option value="pci-assign" <%=  'selected' if passthrough == 'pci-assign'  %>> 
              PCI Assignment
            </option>
          </select>
        </td>
      </tr>
    <% end %>
  </table>
  <!-- END PCI PASSTHROUGH -->

  <h4>Virtual Network Interfaces</h4>
  <table>
    <thead>
      <tr>
        <th>VLAN</th>
        <th>Type</th>
        <th>
          Name (visible in the host)
          <div class="optinfo">
            <p>For TAP interfaces only.</p>
            <p>Choose something descriptive, if possible.</p>
          </div>
        </th>
        <th>
          Bridge to
          <div class="optinfo">
            <p>For TAP interfaces only.</p>
            <p>You can manage bridges <a href="/network/bridges.html">here</a>.</p>
          </div>
        </th>
        <th>Hardware</th>
        <th style="width:13em;">
          MAC Address
          <div class="optinfo">
            By default, MAC addresses are randomly generated in an address range which will avoid conflicts. You can change them if you wish, but be careful to avoid duplicates!
          </div>
        </th>
      </tr>
    </thead>
    <tbody>
      <% nn = 5 %>
      <% 0.upto nn do |n| %>
        <tr>
          <td>
            <select id="net[<%= n %>][vlan]" name="net[][vlan]">
              <% 0.upto nn do |vlan| %>
                <option <%= 'selected' if formvals['net'][n]['vlan'] == vlan.to_s %> value="<%= vlan %>"><%= vlan %></option> 
              <% end %>
            </select>
          </td>
          <td>
            <select onclick="javascript:qemuNetIfControls();" id="net[<%= n %>][type]" name="net[][type]">
              <option <%= 'selected' if formvals['net'][n]['type'] == 'none' %> value="none">(none)</option>
              <option <%= 'selected' if formvals['net'][n]['type'] == 'user' %> value="user" title="For simpler setups, not recommended for servers">User/Default</option>
              <option <%= 'selected' if formvals['net'][n]['type'] == 'tap'  %> value="tap" title="Virtual Ethernet, recommended for servers and advanced setups">TAP</option>
            </select>
          </td>
          <td>
            <input type="text" maxlength="15" id="net[<%= n %>][ifname]" name="net[][ifname]" value="<%= formvals['net'][n]['ifname'] %>"/>
          </td>
          <td>
            <select id="net[<%= n %>][bridge]" name="net[][bridge]"> 
              <option value="">(none)</option>
              <% all_bridges.each do |br| %>
                <option <%= 'selected' if br.name == formvals['net'][n]['bridge'] %> value="<%= br.name %>"><%= br.name %></option>
              <% end %>
            </select>
          </td>
          <td>
            <select id="net[<%= n %>][model]" name="net[][model]">
              <option value="">(default)</option>
              <% OnBoard::V12n::QEMU::Network::NIC.models.sort.each do |model| %>
                <option <%= 'selected' if model == formvals['net'][n]['model'] %> value="<%= model %>"><%= model %></option> 
              <% end %>
            </select>
          </td>
          <td><input type="text" id="net[<%= n %>][macaddr]" name="net[][macaddr]" value="<%= formvals['net'][n]['macaddr'] %>"/></td>
        </tr>
      <% end %>
    </tbody>
  </table>

  <h3>Experts</h3>
  <h4>Extra command lne arguments</h4>
  <input type="text" name="cmdline_append" value="<%= formvals['cmdline_append'] %>" size="120" style="margin-bottom:1em">
  <h4>Run as root</h4>
  <input type="checkbox" name="run_as_root" <%= 'checked' if vm and not vm.config.drop_privileges? %>/>
  <br/>

